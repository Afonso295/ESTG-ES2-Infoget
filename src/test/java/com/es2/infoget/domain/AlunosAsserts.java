package com.es2.infoget.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlunosAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosAllPropertiesEquals(Alunos expected, Alunos actual) {
        assertAlunosAutoGeneratedPropertiesEquals(expected, actual);
        assertAlunosAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosAllUpdatablePropertiesEquals(Alunos expected, Alunos actual) {
        assertAlunosUpdatableFieldsEquals(expected, actual);
        assertAlunosUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosAutoGeneratedPropertiesEquals(Alunos expected, Alunos actual) {
        assertThat(expected)
            .as("Verify Alunos auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosUpdatableFieldsEquals(Alunos expected, Alunos actual) {
        assertThat(expected)
            .as("Verify Alunos relevant properties")
            .satisfies(e -> assertThat(e.getNomealuno()).as("check nomealuno").isEqualTo(actual.getNomealuno()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosUpdatableRelationshipsEquals(Alunos expected, Alunos actual) {
        assertThat(expected)
            .as("Verify Alunos relationships")
            .satisfies(e -> assertThat(e.getCursos()).as("check cursos").isEqualTo(actual.getCursos()));
    }
}
